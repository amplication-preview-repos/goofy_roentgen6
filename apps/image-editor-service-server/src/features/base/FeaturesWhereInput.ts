/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BodyTypeWhereUniqueInput } from "../../bodyType/base/BodyTypeWhereUniqueInput";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { FaceWhereUniqueInput } from "../../face/base/FaceWhereUniqueInput";
import { HairColorWhereUniqueInput } from "../../hairColor/base/HairColorWhereUniqueInput";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { StringFilter } from "../../util/StringFilter";

@InputType()
class FeaturesWhereInput {
  @ApiProperty({
    required: false,
    type: () => BodyTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BodyTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => BodyTypeWhereUniqueInput, {
    nullable: true,
  })
  bodyType?: BodyTypeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => FaceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FaceWhereUniqueInput)
  @IsOptional()
  @Field(() => FaceWhereUniqueInput, {
    nullable: true,
  })
  face?: FaceWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => HairColorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => HairColorWhereUniqueInput)
  @IsOptional()
  @Field(() => HairColorWhereUniqueInput, {
    nullable: true,
  })
  hairColor?: HairColorWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  height?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  weight?: FloatNullableFilter;
}

export { FeaturesWhereInput as FeaturesWhereInput };
