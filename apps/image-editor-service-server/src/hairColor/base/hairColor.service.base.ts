/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HairColor as PrismaHairColor,
  Features as PrismaFeatures,
} from "@prisma/client";

export class HairColorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HairColorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hairColor.count(args);
  }

  async hairColors<T extends Prisma.HairColorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HairColorFindManyArgs>
  ): Promise<PrismaHairColor[]> {
    return this.prisma.hairColor.findMany<Prisma.HairColorFindManyArgs>(args);
  }
  async hairColor<T extends Prisma.HairColorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HairColorFindUniqueArgs>
  ): Promise<PrismaHairColor | null> {
    return this.prisma.hairColor.findUnique(args);
  }
  async createHairColor<T extends Prisma.HairColorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HairColorCreateArgs>
  ): Promise<PrismaHairColor> {
    return this.prisma.hairColor.create<T>(args);
  }
  async updateHairColor<T extends Prisma.HairColorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HairColorUpdateArgs>
  ): Promise<PrismaHairColor> {
    return this.prisma.hairColor.update<T>(args);
  }
  async deleteHairColor<T extends Prisma.HairColorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HairColorDeleteArgs>
  ): Promise<PrismaHairColor> {
    return this.prisma.hairColor.delete(args);
  }

  async findFeaturesItems(
    parentId: string,
    args: Prisma.FeaturesFindManyArgs
  ): Promise<PrismaFeatures[]> {
    return this.prisma.hairColor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .featuresItems(args);
  }
}
