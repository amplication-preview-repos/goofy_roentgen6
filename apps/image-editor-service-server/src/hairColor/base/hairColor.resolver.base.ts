/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HairColor } from "./HairColor";
import { HairColorCountArgs } from "./HairColorCountArgs";
import { HairColorFindManyArgs } from "./HairColorFindManyArgs";
import { HairColorFindUniqueArgs } from "./HairColorFindUniqueArgs";
import { CreateHairColorArgs } from "./CreateHairColorArgs";
import { UpdateHairColorArgs } from "./UpdateHairColorArgs";
import { DeleteHairColorArgs } from "./DeleteHairColorArgs";
import { FeaturesFindManyArgs } from "../../features/base/FeaturesFindManyArgs";
import { Features } from "../../features/base/Features";
import { HairColorService } from "../hairColor.service";
@graphql.Resolver(() => HairColor)
export class HairColorResolverBase {
  constructor(protected readonly service: HairColorService) {}

  async _hairColorsMeta(
    @graphql.Args() args: HairColorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HairColor])
  async hairColors(
    @graphql.Args() args: HairColorFindManyArgs
  ): Promise<HairColor[]> {
    return this.service.hairColors(args);
  }

  @graphql.Query(() => HairColor, { nullable: true })
  async hairColor(
    @graphql.Args() args: HairColorFindUniqueArgs
  ): Promise<HairColor | null> {
    const result = await this.service.hairColor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HairColor)
  async createHairColor(
    @graphql.Args() args: CreateHairColorArgs
  ): Promise<HairColor> {
    return await this.service.createHairColor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HairColor)
  async updateHairColor(
    @graphql.Args() args: UpdateHairColorArgs
  ): Promise<HairColor | null> {
    try {
      return await this.service.updateHairColor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HairColor)
  async deleteHairColor(
    @graphql.Args() args: DeleteHairColorArgs
  ): Promise<HairColor | null> {
    try {
      return await this.service.deleteHairColor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Features], { name: "featuresItems" })
  async findFeaturesItems(
    @graphql.Parent() parent: HairColor,
    @graphql.Args() args: FeaturesFindManyArgs
  ): Promise<Features[]> {
    const results = await this.service.findFeaturesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
