/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Face as PrismaFace,
  Features as PrismaFeatures,
  Image as PrismaImage,
  User as PrismaUser,
} from "@prisma/client";

export class FaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FaceCountArgs, "select">): Promise<number> {
    return this.prisma.face.count(args);
  }

  async faces<T extends Prisma.FaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceFindManyArgs>
  ): Promise<PrismaFace[]> {
    return this.prisma.face.findMany<Prisma.FaceFindManyArgs>(args);
  }
  async face<T extends Prisma.FaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceFindUniqueArgs>
  ): Promise<PrismaFace | null> {
    return this.prisma.face.findUnique(args);
  }
  async createFace<T extends Prisma.FaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceCreateArgs>
  ): Promise<PrismaFace> {
    return this.prisma.face.create<T>(args);
  }
  async updateFace<T extends Prisma.FaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceUpdateArgs>
  ): Promise<PrismaFace> {
    return this.prisma.face.update<T>(args);
  }
  async deleteFace<T extends Prisma.FaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDeleteArgs>
  ): Promise<PrismaFace> {
    return this.prisma.face.delete(args);
  }

  async findFeaturesItems(
    parentId: string,
    args: Prisma.FeaturesFindManyArgs
  ): Promise<PrismaFeatures[]> {
    return this.prisma.face
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .featuresItems(args);
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.face
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.face
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
