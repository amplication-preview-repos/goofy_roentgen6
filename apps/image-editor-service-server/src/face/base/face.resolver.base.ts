/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Face } from "./Face";
import { FaceCountArgs } from "./FaceCountArgs";
import { FaceFindManyArgs } from "./FaceFindManyArgs";
import { FaceFindUniqueArgs } from "./FaceFindUniqueArgs";
import { CreateFaceArgs } from "./CreateFaceArgs";
import { UpdateFaceArgs } from "./UpdateFaceArgs";
import { DeleteFaceArgs } from "./DeleteFaceArgs";
import { FeaturesFindManyArgs } from "../../features/base/FeaturesFindManyArgs";
import { Features } from "../../features/base/Features";
import { Image } from "../../image/base/Image";
import { User } from "../../user/base/User";
import { FaceService } from "../face.service";
@graphql.Resolver(() => Face)
export class FaceResolverBase {
  constructor(protected readonly service: FaceService) {}

  async _facesMeta(
    @graphql.Args() args: FaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Face])
  async faces(@graphql.Args() args: FaceFindManyArgs): Promise<Face[]> {
    return this.service.faces(args);
  }

  @graphql.Query(() => Face, { nullable: true })
  async face(@graphql.Args() args: FaceFindUniqueArgs): Promise<Face | null> {
    const result = await this.service.face(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Face)
  async createFace(@graphql.Args() args: CreateFaceArgs): Promise<Face> {
    return await this.service.createFace({
      ...args,
      data: {
        ...args.data,

        image: args.data.image
          ? {
              connect: args.data.image,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Face)
  async updateFace(@graphql.Args() args: UpdateFaceArgs): Promise<Face | null> {
    try {
      return await this.service.updateFace({
        ...args,
        data: {
          ...args.data,

          image: args.data.image
            ? {
                connect: args.data.image,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Face)
  async deleteFace(@graphql.Args() args: DeleteFaceArgs): Promise<Face | null> {
    try {
      return await this.service.deleteFace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Features], { name: "featuresItems" })
  async findFeaturesItems(
    @graphql.Parent() parent: Face,
    @graphql.Args() args: FeaturesFindManyArgs
  ): Promise<Features[]> {
    const results = await this.service.findFeaturesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Image, {
    nullable: true,
    name: "image",
  })
  async getImage(@graphql.Parent() parent: Face): Promise<Image | null> {
    const result = await this.service.getImage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Face): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
