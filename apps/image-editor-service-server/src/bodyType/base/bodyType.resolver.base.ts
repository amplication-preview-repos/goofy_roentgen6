/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BodyType } from "./BodyType";
import { BodyTypeCountArgs } from "./BodyTypeCountArgs";
import { BodyTypeFindManyArgs } from "./BodyTypeFindManyArgs";
import { BodyTypeFindUniqueArgs } from "./BodyTypeFindUniqueArgs";
import { CreateBodyTypeArgs } from "./CreateBodyTypeArgs";
import { UpdateBodyTypeArgs } from "./UpdateBodyTypeArgs";
import { DeleteBodyTypeArgs } from "./DeleteBodyTypeArgs";
import { FeaturesFindManyArgs } from "../../features/base/FeaturesFindManyArgs";
import { Features } from "../../features/base/Features";
import { BodyTypeService } from "../bodyType.service";
@graphql.Resolver(() => BodyType)
export class BodyTypeResolverBase {
  constructor(protected readonly service: BodyTypeService) {}

  async _bodyTypesMeta(
    @graphql.Args() args: BodyTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BodyType])
  async bodyTypes(
    @graphql.Args() args: BodyTypeFindManyArgs
  ): Promise<BodyType[]> {
    return this.service.bodyTypes(args);
  }

  @graphql.Query(() => BodyType, { nullable: true })
  async bodyType(
    @graphql.Args() args: BodyTypeFindUniqueArgs
  ): Promise<BodyType | null> {
    const result = await this.service.bodyType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BodyType)
  async createBodyType(
    @graphql.Args() args: CreateBodyTypeArgs
  ): Promise<BodyType> {
    return await this.service.createBodyType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BodyType)
  async updateBodyType(
    @graphql.Args() args: UpdateBodyTypeArgs
  ): Promise<BodyType | null> {
    try {
      return await this.service.updateBodyType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BodyType)
  async deleteBodyType(
    @graphql.Args() args: DeleteBodyTypeArgs
  ): Promise<BodyType | null> {
    try {
      return await this.service.deleteBodyType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Features], { name: "featuresItems" })
  async findFeaturesItems(
    @graphql.Parent() parent: BodyType,
    @graphql.Args() args: FeaturesFindManyArgs
  ): Promise<Features[]> {
    const results = await this.service.findFeaturesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
