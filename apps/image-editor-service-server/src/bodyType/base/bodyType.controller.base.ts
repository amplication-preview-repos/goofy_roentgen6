/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BodyTypeService } from "../bodyType.service";
import { BodyTypeCreateInput } from "./BodyTypeCreateInput";
import { BodyType } from "./BodyType";
import { BodyTypeFindManyArgs } from "./BodyTypeFindManyArgs";
import { BodyTypeWhereUniqueInput } from "./BodyTypeWhereUniqueInput";
import { BodyTypeUpdateInput } from "./BodyTypeUpdateInput";
import { FeaturesFindManyArgs } from "../../features/base/FeaturesFindManyArgs";
import { Features } from "../../features/base/Features";
import { FeaturesWhereUniqueInput } from "../../features/base/FeaturesWhereUniqueInput";

export class BodyTypeControllerBase {
  constructor(protected readonly service: BodyTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BodyType })
  async createBodyType(
    @common.Body() data: BodyTypeCreateInput
  ): Promise<BodyType> {
    return await this.service.createBodyType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BodyType] })
  @ApiNestedQuery(BodyTypeFindManyArgs)
  async bodyTypes(@common.Req() request: Request): Promise<BodyType[]> {
    const args = plainToClass(BodyTypeFindManyArgs, request.query);
    return this.service.bodyTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BodyType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bodyType(
    @common.Param() params: BodyTypeWhereUniqueInput
  ): Promise<BodyType | null> {
    const result = await this.service.bodyType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BodyType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBodyType(
    @common.Param() params: BodyTypeWhereUniqueInput,
    @common.Body() data: BodyTypeUpdateInput
  ): Promise<BodyType | null> {
    try {
      return await this.service.updateBodyType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BodyType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBodyType(
    @common.Param() params: BodyTypeWhereUniqueInput
  ): Promise<BodyType | null> {
    try {
      return await this.service.deleteBodyType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/featuresItems")
  @ApiNestedQuery(FeaturesFindManyArgs)
  async findFeaturesItems(
    @common.Req() request: Request,
    @common.Param() params: BodyTypeWhereUniqueInput
  ): Promise<Features[]> {
    const query = plainToClass(FeaturesFindManyArgs, request.query);
    const results = await this.service.findFeaturesItems(params.id, {
      ...query,
      select: {
        bodyType: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        face: {
          select: {
            id: true,
          },
        },

        hairColor: {
          select: {
            id: true,
          },
        },

        height: true,
        id: true,
        updatedAt: true,
        weight: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/featuresItems")
  async connectFeaturesItems(
    @common.Param() params: BodyTypeWhereUniqueInput,
    @common.Body() body: FeaturesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featuresItems: {
        connect: body,
      },
    };
    await this.service.updateBodyType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/featuresItems")
  async updateFeaturesItems(
    @common.Param() params: BodyTypeWhereUniqueInput,
    @common.Body() body: FeaturesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featuresItems: {
        set: body,
      },
    };
    await this.service.updateBodyType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/featuresItems")
  async disconnectFeaturesItems(
    @common.Param() params: BodyTypeWhereUniqueInput,
    @common.Body() body: FeaturesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featuresItems: {
        disconnect: body,
      },
    };
    await this.service.updateBodyType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
